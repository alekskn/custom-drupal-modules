<?php

/**
 * @file
 * Main file for custom hooks and functions
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\NodeType;


/**
 * Implements hook_theme().
 */
function mikhalych_theme($existing, $type, $theme, $path) {
  return [
    'mikhalych_previous_next' => [
      'variables' => [
        'entity' => NULL,
      ],
      'file' => 'mikhalych.theme.inc',
      'pattern' => 'mikhalych_previous_next__',
    ],
    'mikhalych_social_share' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
      ],
      'file' => 'mikhalych.theme.inc',
    ],
    'mikhalych_label_with_icon_media_formatter' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
        'filesize' => NULL,
        'media_type' => NULL,
        'mime_type' => NULL,
      ],
      'file' => 'mikhalych.theme.inc',
    ],
    'contact_message_feedback_form' => [
      'render element' => 'form',
      'file' => 'mikhalych.theme.inc',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
/*function mikhalych_entity_extra_field_info() {
  $extra = [];

  $load_multiple = NodeType::loadMultiple();
  foreach ($load_multiple as $bundle) {
    $extra['node'][$bundle->id()]['display']['previous_next'] = [
      'label' => t('Buttons to previous and next entity'),
      'weight' => 100,
      'visible' => FALSE,
    ];
  }

  return $extra;
}*/

/**
 * Implements hook_ENTITY_TYPE_view().
 */
/*function mikhalych_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('previous_next')) {
    $build['previous_next'] = [
      '#theme' => 'mikhalych_previous_next',
      '#entity' => $entity,
    ];
  }
}*/

/**
 * Implements hook_query_TAG_alter() for entity_query_random.
 */
function mikhalych_query_entity_query_random_alter(AlterableInterface $query) {
  $query->orderRandom();
}
